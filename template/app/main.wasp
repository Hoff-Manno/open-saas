app OpenSaaS {
  wasp: {
    version: "^0.17.0"
  },

  title: "PDF Learning SaaS - Transform Documents into Interactive Learning",

  head: [
    "<link rel='icon' href='/favicon.ico' />",
    "<meta charset='utf-8' />",
    "<meta name='description' content='Transform your PDF documents into interactive learning modules with AI-powered processing, team management, and progress tracking.' />",
    "<meta name='author' content='PDF Learning SaaS' />",
    "<meta name='keywords' content='pdf, learning, training, ai, education, team management, progress tracking, docling, saas' />",
    
    "<meta property='og:type' content='website' />",
    "<meta property='og:title' content='PDF Learning SaaS - AI-Powered Document Learning' />",
    "<meta property='og:site_name' content='PDF Learning SaaS' />",
    "<meta property='og:url' content='https://your-pdf-learning-app.com' />",
    "<meta property='og:description' content='Transform PDFs into interactive learning experiences. AI-powered processing, team management, and comprehensive progress tracking.' />",
    "<meta property='og:image' content='https://your-pdf-learning-app.com/public-banner.webp' />",
    "<meta name='twitter:image' content='https://your-pdf-learning-app.com/public-banner.webp' />",
    "<meta name='twitter:image:width' content='800' />",
    "<meta name='twitter:image:height' content='400' />",
    "<meta name='twitter:card' content='summary_large_image' />",
    // TODO: You can put your Plausible analytics scripts below (https://docs.opensaas.sh/guides/analytics/):
    // NOTE: Plausible does not use Cookies, so you can simply add the scripts here.
    // Google, on the other hand, does, so you must instead add the script dynamically
    // via the Cookie Consent component after the user clicks the "Accept" cookies button.
    "<script defer data-domain='<your-site-id>' src='https://plausible.io/js/script.js'></script>",  // for production
    "<script defer data-domain='<your-site-id>' src='https://plausible.io/js/script.local.js'></script>",  // for development
  ],

  // üîê Auth out of the box! https://wasp.sh/docs/auth/overview
  auth: {
    userEntity: User,
    methods: {
      // NOTE: If you decide to not use email auth, make sure to also delete the related routes and pages below.
      //   (RequestPasswordReset(Route|Page), PasswordReset(Route|Page), EmailVerification(Route|Page))
      email: {
        fromField: {
          name: "PDF Learning SaaS",
          email: "me@example.com"
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
          getEmailContentFn: import { getVerificationEmailContent } from "@src/auth/email-and-pass/emails",
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
          getEmailContentFn: import { getPasswordResetEmailContent } from "@src/auth/email-and-pass/emails",
        },
        userSignupFields: import { getEmailUserFields } from "@src/auth/userSignupFields",
      },
      // Google Auth for team access
      google: { // Guide for setting up Auth via Google
        userSignupFields: import { getGoogleUserFields } from "@src/auth/userSignupFields",
        configFn: import { getGoogleAuthConfig } from "@src/auth/userSignupFields",
      },
      // Uncomment to enable GitHub Auth (check https://wasp.sh/docs/auth/social-auth/github for setup instructions):
      // gitHub: {
      //   userSignupFields: import { getGitHubUserFields } from "@src/auth/userSignupFields",
      //   configFn: import { getGitHubAuthConfig } from "@src/auth/userSignupFields",
      // },
      // Uncomment to enable Discord Auth (check https://wasp.sh/docs/auth/social-auth/discord for setup instructions):
      // discord: {
      //   userSignupFields: import { getDiscordUserFields } from "@src/auth/userSignupFields",
      //   configFn: import { getDiscordAuthConfig } from "@src/auth/userSignupFields"
      // }
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/pdf-learning",
    // Auth hooks for team invitation handling
    onAfterSignup: import { onAfterSignup } from "@src/auth/hooks",
    onBeforeOAuthRedirect: import { onBeforeOAuthRedirect } from "@src/auth/hooks",
  },

  db: {
    // Run `wasp db seed` to seed the database with the seed functions below:
    seeds: [
      // Populates the database with a bunch of fake users to work with during development.
      import { seedMockUsers } from "@src/server/scripts/dbSeeds",
    ]
  },

  client: {
    rootComponent: import App from "@src/client/App",
  },

  emailSender: {
    // Switch to SendGrid for production readiness. Ensure SENDGRID_API_KEY is set in .env.server.
    provider: SendGrid,
    defaultFrom: {
      name: "PDF Learning SaaS",
      // Must match verified sender in SendGrid
      email: "me@example.com"
    },
  },
}

route LandingPageRoute { path: "/", to: LandingPage }
page LandingPage {
  component: import LandingPage from "@src/landing-page/LandingPage"
}

//#region Auth Pages
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/auth/LoginPage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { Signup } from "@src/auth/SignupPage"
}

route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import { RequestPasswordResetPage } from "@src/auth/email-and-pass/RequestPasswordResetPage",
}

route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { PasswordResetPage } from "@src/auth/email-and-pass/PasswordResetPage",
}

route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import { EmailVerificationPage } from "@src/auth/email-and-pass/EmailVerificationPage",
}

route AcceptInvitationRoute { path: "/accept-invitation", to: AcceptInvitationPage }
page AcceptInvitationPage {
  authRequired: true,
  component: import { AcceptInvitationPage } from "@src/team/AcceptInvitationPage",
}
//#endregion

//#region User
route AccountRoute { path: "/account", to: AccountPage }
page AccountPage {
  authRequired: true,
  component: import Account from "@src/user/AccountPage"
}

query getPaginatedUsers {
  fn: import { getPaginatedUsers } from "@src/user/operations",
  entities: [User]
}

action updateIsUserAdminById {
  fn: import { updateIsUserAdminById } from "@src/user/operations",
  entities: [User]
}

//#region Team Management
action createTeamInvitation {
  fn: import { createTeamInvitation } from "@src/team/operations",
  entities: [User, Organization]
}

action acceptTeamInvitation {
  fn: import { acceptTeamInvitation } from "@src/team/operations",
  entities: [User, Organization]
}

action assignModuleToUsers {
  fn: import { assignModuleToUsers } from "@src/team/operations",
  entities: [User, LearningModule, ModuleAssignment, Organization]
}

query getTeamUsers {
  fn: import { getTeamUsers } from "@src/team/operations",
  entities: [User]
}

action updateUserRole {
  fn: import { updateUserRole } from "@src/team/operations",
  entities: [User]
}
//#endregion

//#region PDF Learning Hub
route PDFLearningRoute { path: "/pdf-learning", to: PDFLearningDashboard }
page PDFLearningDashboard {
  authRequired: true,
  component: import PDFLearningDashboard from "@src/pdf-learning/PDFLearningDashboard"
}

// Enhanced AI operations for PDF learning
action generateLearningQuestions {
  fn: import { generateLearningQuestions } from "@src/pdf-learning/operations",
  entities: [User]
}

action generateContentSummary {
  fn: import { generateContentSummary } from "@src/pdf-learning/operations", 
  entities: [User]
}

action enrichTechnicalContent {
  fn: import { enrichTechnicalContent } from "@src/pdf-learning/operations",
  entities: [User]
}

// Additional operations can be added here as needed
// processPDFToModule and getUserDashboardData can be implemented later
//#endregion

//#region Payment
route PricingPageRoute { path: "/pricing", to: PricingPage }
page PricingPage {
  component: import PricingPage from "@src/payment/PricingPage"
}

route CheckoutRoute { path: "/checkout", to: CheckoutPage }
page CheckoutPage {
  authRequired: true,
  component: import Checkout from "@src/payment/CheckoutPage"
}

query getCustomerPortalUrl {
  fn: import { getCustomerPortalUrl } from  "@src/payment/operations",
  entities: [User]
}

action generateCheckoutSession {
  fn: import { generateCheckoutSession } from "@src/payment/operations",
  entities: [User]
}

api paymentsWebhook {
  fn: import { paymentsWebhook } from "@src/payment/webhook",
  entities: [User],
  middlewareConfigFn: import { paymentsMiddlewareConfigFn } from "@src/payment/webhook",
  httpRoute: (POST, "/payments-webhook")
}
//#endregion

//#region File Upload
route FileUploadRoute { path: "/file-upload", to: FileUploadPage }
page FileUploadPage {
  authRequired: true,
  component: import FileUpload from "@src/file-upload/FileUploadPage"
}

route PDFUploadRoute { path: "/pdf-upload", to: PDFUploadPage }
page PDFUploadPage {
  authRequired: true,
  component: import PDFUpload from "@src/file-upload/PDFUploadPage"
}

action createFile {
  fn: import { createFile } from "@src/file-upload/operations",
  entities: [User, File]
}

query getAllFilesByUser {
  fn: import { getAllFilesByUser } from "@src/file-upload/operations",
  entities: [User, File]
}

query getDownloadFileSignedURL {
  fn: import { getDownloadFileSignedURL } from "@src/file-upload/operations",
  entities: [User, File]
}

// PDF-specific operations for learning modules
action createPDFFile {
  fn: import { createPDFFile } from "@src/file-upload/operations",
  entities: [User, File]
}

query getAllPDFFilesByUser {
  fn: import { getAllPDFFilesByUser } from "@src/file-upload/operations",
  entities: [User, File]
}

query getPDFDownloadSignedURL {
  fn: import { getPDFDownloadSignedURL } from "@src/file-upload/operations",
  entities: [User, File]
}
//#endregion

//#region PDF Processing
action processPDF {
  fn: import { processPDF } from "@src/pdf-processing/operations",
  entities: [User, File, LearningModule]
}

query getProcessingStatus {
  fn: import { getProcessingStatus } from "@src/pdf-processing/operations",
  entities: [User, LearningModule]
}

query getUserLearningModules {
  fn: import { getUserLearningModules } from "@src/pdf-processing/operations",
  entities: [User, LearningModule]
}

action retryPDFProcessing {
  fn: import { retryPDFProcessing } from "@src/pdf-processing/operations",
  entities: [User, LearningModule]
}

query checkDoclingHealth {
  fn: import { checkDoclingHealth } from "@src/pdf-processing/operations",
  entities: [User]
}
//#endregion

//#region Learning AI Operations (Enhanced)
// These operations are now handled by the PDF Learning module
// with enhanced functionality and better integration
route AILearningDemoRoute { path: "/ai-learning-demo", to: AILearningDemoPage }
page AILearningDemoPage {
  authRequired: true,
  component: import AILearningDemo from "@src/learning-ai/AILearningDemo"
}
//#endregion

//#region Learning Module Management
action createModule {
  fn: import { createModule } from "@src/learning-modules/operations",
  entities: [User, LearningModule]
}

action updateModule {
  fn: import { updateModule } from "@src/learning-modules/operations",
  entities: [User, LearningModule]
}

action deleteModule {
  fn: import { deleteModule } from "@src/learning-modules/operations",
  entities: [User, LearningModule, ModuleAssignment]
}

action createSection {
  fn: import { createSection } from "@src/learning-modules/operations",
  entities: [User, LearningModule, ModuleSection]
}

action updateSection {
  fn: import { updateSection } from "@src/learning-modules/operations",
  entities: [User, LearningModule, ModuleSection]
}

action deleteSection {
  fn: import { deleteSection } from "@src/learning-modules/operations",
  entities: [User, LearningModule, ModuleSection, UserProgress]
}

action reorderSections {
  fn: import { reorderSections } from "@src/learning-modules/operations",
  entities: [User, LearningModule, ModuleSection]
}

query getOrganizationModules {
  fn: import { getOrganizationModules } from "@src/learning-modules/operations",
  entities: [User, LearningModule, ModuleSection]
}

query getModuleDetails {
  fn: import { getModuleDetails } from "@src/learning-modules/operations",
  entities: [User, LearningModule, ModuleSection, Organization]
}

// Progress tracking operations
action updateProgress {
  fn: import { updateProgress } from "@src/learning-modules/progress-operations",
  entities: [User, LearningModule, ModuleSection, UserProgress]
}

query getModuleProgress {
  fn: import { getModuleProgress } from "@src/learning-modules/progress-operations",
  entities: [User, LearningModule, ModuleSection, UserProgress]
}

query getUserProgressSummary {
  fn: import { getUserProgressSummary } from "@src/learning-modules/progress-operations",
  entities: [User, LearningModule, ModuleSection, UserProgress, ModuleAssignment]
}

query getRecentLearningActivity {
  fn: import { getRecentLearningActivity } from "@src/learning-modules/progress-operations",
  entities: [User, LearningModule, ModuleSection, UserProgress]
}

action bulkUpdateProgress {
  fn: import { bulkUpdateProgress } from "@src/learning-modules/progress-operations",
  entities: [User, LearningModule, ModuleSection, UserProgress]
}

route ModuleManagementRoute { path: "/learning-modules", to: ModuleManagementPage }
page ModuleManagementPage {
  authRequired: true,
  component: import ModuleManagement from "@src/learning-modules/ModuleManagementPage"
}

route ModuleBuilderRoute { path: "/learning-modules/builder/:moduleId?", to: ModuleBuilderPage }
page ModuleBuilderPage {
  authRequired: true,
  component: import ModuleBuilder from "@src/learning-modules/ModuleBuilderPage"
}

route LearningViewerRoute { path: "/learning-modules/viewer/:moduleId", to: LearningViewerPage }
page LearningViewerPage {
  authRequired: true,
  component: import LearningViewer from "@src/learning-modules/LearningViewerPage"
}

route ProgressDashboardRoute { path: "/progress-dashboard", to: ProgressDashboardPage }
page ProgressDashboardPage {
  authRequired: true,
  component: import ProgressDashboard from "@src/learning-modules/ProgressDashboard"
}
//#endregion

//#region Analytics
query getDailyStats {
  fn: import { getDailyStats } from "@src/analytics/operations",
  entities: [User, DailyStats]
}

query getLearningAnalytics {
  fn: import { getLearningAnalytics } from "@src/analytics/learning-analytics",
  entities: [User, LearningModule, ModuleAssignment, UserProgress, Organization]
}

query getUserEngagement {
  fn: import { getUserEngagement } from "@src/analytics/learning-analytics", 
  entities: [User, LearningModule, ModuleAssignment, UserProgress]
}

job dailyStatsJob {
  executor: PgBoss,
  perform: {
    fn: import { calculateDailyStats } from "@src/analytics/stats"
  },
  schedule: {
    cron: "0 * * * *" // every hour. useful in production
    // cron: "* * * * *" // every minute. useful for debugging
  },
  entities: [User, DailyStats, Logs, PageViewSource, LearningModule, ModuleAssignment, UserProgress]
}

job processPDFJob {
  executor: PgBoss,
  perform: {
    fn: import { processPDFJob } from "@src/pdf-processing/jobs"
  },
  entities: [User, LearningModule, ModuleSection]
}
//#endregion

//#region Admin Dashboard
route AdminRoute { path: "/admin", to: EnhancedAnalyticsDashboardPage }
page EnhancedAnalyticsDashboardPage {
  authRequired: true,
  component: import EnhancedAnalyticsDashboard from "@src/admin/dashboards/analytics/EnhancedAnalyticsDashboard"
}

route AdminAnalyticsRoute { path: "/admin/analytics", to: AnalyticsDashboardPage }
page AnalyticsDashboardPage {
  authRequired: true,
  component: import AnalyticsDashboardPage from "@src/admin/dashboards/analytics/AnalyticsDashboardPage"
}

route AdminEngagementRoute { path: "/admin/engagement", to: UserEngagementDashboardPage }
page UserEngagementDashboardPage {
  authRequired: true,
  component: import UserEngagementDashboard from "@src/admin/dashboards/analytics/UserEngagementDashboard"
}

route AdminUsersRoute { path: "/admin/users", to: AdminUsersPage }
page AdminUsersPage {
  authRequired: true,
  component: import AdminUsers from "@src/admin/dashboards/users/EnhancedUsersDashboardPage"
}

route AdminSettingsRoute { path: "/admin/settings", to: AdminSettingsPage }
page AdminSettingsPage {
  authRequired: true,
  component: import AdminSettings from "@src/admin/elements/settings/SettingsPage"
}

route AdminCalendarRoute { path: "/admin/calendar", to: AdminCalendarPage }
page AdminCalendarPage {
  authRequired: true,
  component: import AdminCalendar from "@src/admin/elements/calendar/CalendarPage"
}


route AdminUIButtonsRoute { path: "/admin/ui/buttons", to: AdminUIButtonsPage }
page AdminUIButtonsPage {
  authRequired: true,
  component: import AdminUI from "@src/admin/elements/ui-elements/ButtonsPage"
}

route NotFoundRoute { path: "*", to: NotFoundPage }
page NotFoundPage {
  component: import { NotFoundPage } from "@src/client/components/NotFoundPage"
}
//#endregion

//#region Contact Form Messages
// TODO: 
// add functionality to allow users to send messages to admin
// and make them accessible via the admin dashboard
route AdminMessagesRoute { path: "/admin/messages", to: AdminMessagesPage }
page AdminMessagesPage {
  authRequired: true,
  component: import AdminMessages from "@src/messages/MessagesPage"
}

route AdminLearningModulesRoute { path: "/admin/learning/modules", to: AdminLearningModulesPage }
page AdminLearningModulesPage {
  authRequired: true,
  component: import AdminLearningModules from "@src/admin/dashboards/learning/LearningModulesDashboard"
}

route AdminLearningProgressRoute { path: "/admin/learning/progress", to: AdminLearningProgressPage }
page AdminLearningProgressPage {
  authRequired: true,
  component: import AdminLearningProgress from "@src/admin/dashboards/learning/LearningProgressDashboard"
}
//#endregion
