datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  email                     String?         @unique
  username                  String?         @unique
  isAdmin                   Boolean         @default(false)

  paymentProcessorUserId    String?         @unique
  lemonSqueezyCustomerPortalUrl String?     // You can delete this if you're not using Lemon Squeezy as your payments processor.
  subscriptionStatus        String?         // 'active', 'cancel_at_period_end', 'past_due', 'deleted'
  subscriptionPlan          String?         // 'starter', 'professional', 'enterprise'
  datePaid                  DateTime?
  credits                   Int             @default(3)

  // PDF Learning fields
  organizationId            String?
  role                      UserRole        @default(LEARNER)

  gptResponses              GptResponse[]
  contactFormMessages       ContactFormMessage[]
  tasks                     Task[]
  files                     File[]
  
  // PDF Learning relations
  createdModules            LearningModule[] @relation("ModuleCreator")
  assignedModules           ModuleAssignment[]
  progress                  UserProgress[]
  organization              Organization?   @relation(fields: [organizationId], references: [id])
}

model GptResponse {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  content                   String
}

model Task {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  description               String
  time                      String          @default("1")
  isDone                    Boolean         @default(false)
}

model File {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  name                      String
  type                      String
  key                       String
  uploadUrl                 String
}

model DailyStats {
  id                               Int             @id @default(autoincrement())
  date                             DateTime        @default(now()) @unique

  totalViews                       Int             @default(0)
  prevDayViewsChangePercent        String          @default("0")
  userCount                        Int             @default(0)
  paidUserCount                    Int             @default(0)
  userDelta                        Int             @default(0)
  paidUserDelta                    Int             @default(0)
  totalRevenue                     Float           @default(0)
  totalProfit                      Float           @default(0)

  // Learning metrics
  totalModules                     Int             @default(0)
  activeModules                    Int             @default(0)
  totalLearners                    Int             @default(0)
  activeLearners                   Int             @default(0)
  modulesCompletedToday            Int             @default(0)
  avgCompletionRate                Float           @default(0)
  totalTimeSpentMinutes            Int             @default(0)
  avgTimeSpentPerUser              Float           @default(0)

  sources                          PageViewSource[]
}

model PageViewSource {
  @@id([date, name])
  name                     String
  date                     DateTime        @default(now())

  dailyStats               DailyStats?     @relation(fields: [dailyStatsId], references: [id])
  dailyStatsId             Int?

  visitors                 Int
}

model Logs {
  id                       Int             @id @default(autoincrement())
  createdAt                DateTime        @default(now())

  message                  String
  level                    String
}

model ContactFormMessage {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  content                   String
  isRead                    Boolean         @default(false)
  repliedAt                 DateTime?
}
// PDF Learning SaaS Enums
enum UserRole {
  ADMIN
  LEARNER
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum SubscriptionTier {
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

// PDF Learning SaaS Models
model Organization {
  id                String              @id @default(uuid())
  name              String
  subscriptionTier  SubscriptionTier
  maxModules        Int?
  maxUsers          Int?
  createdAt         DateTime            @default(now())
  
  users             User[]
  modules           LearningModule[]
}

model LearningModule {
  id                String              @id @default(uuid())
  title             String
  description       String?
  originalFileName  String
  fileKey           String              // S3 key for original PDF
  processedContent  Json                // Structured content from Docling
  processingStatus  ProcessingStatus    @default(PENDING)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  creatorId         String
  organizationId    String
  
  sections          ModuleSection[]
  assignments       ModuleAssignment[]
  progress          UserProgress[]
  creator           User                @relation("ModuleCreator", fields: [creatorId], references: [id])
  organization      Organization        @relation(fields: [organizationId], references: [id])
}

model ModuleSection {
  id                String              @id @default(uuid())
  moduleId          String
  title             String
  content           String              // Markdown content
  orderIndex        Int
  estimatedMinutes  Int?
  
  module            LearningModule      @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress          UserProgress[]
}

model ModuleAssignment {
  id                String              @id @default(uuid())
  userId            String
  moduleId          String
  assignedAt        DateTime            @default(now())
  dueDate           DateTime?
  completedAt       DateTime?
  
  user              User                @relation(fields: [userId], references: [id])
  module            LearningModule      @relation(fields: [moduleId], references: [id])
  
  @@unique([userId, moduleId])
}

model UserProgress {
  id                String              @id @default(uuid())
  userId            String
  moduleId          String
  sectionId         String
  completed         Boolean             @default(false)
  timeSpent         Int                 @default(0) // minutes
  lastAccessed      DateTime            @default(now())
  bookmarkPosition  String?             // JSON for scroll position, etc.
  
  user              User                @relation(fields: [userId], references: [id])
  module            LearningModule      @relation(fields: [moduleId], references: [id])
  section           ModuleSection       @relation(fields: [sectionId], references: [id])
  
  @@unique([userId, moduleId, sectionId])
}